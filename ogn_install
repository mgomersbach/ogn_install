#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# OGN installer
#
# MIT License
#
# Copyright 2020 Mark Gomersbach <mark@gomersbach.nl>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

# Default vars for OGN
OGN_USER="${OGN_USER:-"ognuser"}"
OGN_FREQCORR="${OGN_FREQCORR:-"+12.345"}"
OGN_GSMCENTERFREQ="${OGN_GSMCENTERFREQ:-"937.4"}"
OGN_GSMGAIN="${OGN_GSMGAIN:-"30.0"}"
OGN_LATITUDE="${OGN_LATITUDE:-"+50.123456"}"
OGN_LONGITUDE="${OGN_LONGITUDE:-"+5.123456"}"
OGN_ALTITUDE="${OGN_ALTITUDE:-"5"}"
OGN_GEOIDSEPAR="${OGN_GEOIDSEPAR:-"50"}"
OGN_CALLSIGN="${OGN_CALLSIGN:-"testcallsign"}"
OGN_CRON="${OGN_CRON:-"*/5 * * * * root"}"

# Default vars for FR24
FR24_KEY="${FR24_KEY:-"xxxxxxxxxxxxxxxxxxx"}"

# Default vars for this script
CPU_ARCHITECTURE=$(uname -m | tr -d "\n\r")
REAL_PI=$(
  bash -c 'command -v vcgencmd > /dev/null 2>&1 && vcgencmd measure_temp > /dev/null 2>&1 && grep -q Raspberry /sys/firmware/devicetree/base/model > /dev/null 2>&1'
  echo $?
)
SYSTEM_UPDATE="${SYSTEM_UPDATE:-}"
LOG_LEVEL="${LOG_LEVEL:-6}"
NO_COLOR="${NO_COLOR:-}"
DESTRUCTIVE="${DESTRUCTIVE:-}"
DEBUG="${DEBUG:-}"
VERBOSE="${VERBOSE:-}"
help="false"

KERNEL=$(uname -r)
KERNEL_VERSION=$(echo "${KERNEL}" | cut -d \. -f 1)$(echo "${KERNEL}" | cut -d \. -f 2)

function __log() {
  local log_level="${1}"
  shift

  # shellcheck disable=SC2034
  local color_debug='\x1b[35m'
  # shellcheck disable=SC2034
  local color_info='\x1b[32m'
  # shellcheck disable=SC2034
  local color_notice='\x1b[34m'
  # shellcheck disable=SC2034
  local color_warning='\x1b[33m'
  # shellcheck disable=SC2034
  local color_error='\x1b[31m'
  # shellcheck disable=SC2034
  local color_critical='\x1b[1;31m'
  # shellcheck disable=SC2034
  local color_alert='\x1b[1;37;41m'
  # shellcheck disable=SC2034
  local color_emergency='\x1b[1;4;5;37;41m'

  local colorvar="color_${log_level}"

  local color="${!colorvar:-${color_error}}"
  local color_reset='\x1b[0m'

  if [[ ${NO_COLOR:-} == "true" ]]; then
    color=""
    color_reset=""
  fi

  local log_line=""

  while IFS=$'\n' read -r log_line; do
    echo -e "$(date -u +"%Y-%m-%d %H:%M:%S UTC") ${color}$(printf "[%9s]" "${log_level}")${color_reset} ${log_line}" 1>&2
  done <<<"${@:-}"
}

function emergency() {
  __log emergency "${@}"
  exit 1
}

function alert() {
  [[ ${LOG_LEVEL:-0} -ge 1 ]] && __log alert "${@}"
  true
}

function critical() {
  [[ ${LOG_LEVEL:-0} -ge 2 ]] && __log critical "${@}"
  true
}

function error() {
  [[ ${LOG_LEVEL:-0} -ge 3 ]] && __log error "${@}"
  true
}

function warning() {
  [[ ${LOG_LEVEL:-0} -ge 4 ]] && __log warning "${@}"
  true
}

function notice() {
  [[ ${LOG_LEVEL:-0} -ge 5 ]] && __log notice "${@}"
  true
}

function info() {
  [[ ${LOG_LEVEL:-0} -ge 6 ]] && __log info "${@}"
  true
}

function debug() {
  [[ ${LOG_LEVEL:-0} -ge 7 ]] && __log debug "${@}"
  true
}

__err_report() {
  local error_code=${?}
  error "Error in function ${1} on line ${2}"
  exit ${error_code}
}

# Help message
usage() {
  cat <<EOF
Usage:
    $0 [options]

Options:
    -d         Output debugging messages
    -h         This
    -n         No colored output
    -D         Destructive mode, script goes brrrr.
    -v         Enable verbose mode, print script as it is executed
EOF
}

# Flag handling
while getopts 'dhnDv' flag; do
  case "${flag}" in
    d) DEBUG="true" ;;
    h) help="true" ;;
    n) NO_COLOR="true" ;;
    D) DESTRUCTIVE="true" ;;
    v) VERBOSE="true" ;;
    *) error "Unexpected option ${flag}" && usage ;;
  esac
done

# Check if any arguments are given
if [ $# -eq 0 ]; then
  error "No arguments provided"
  usage
  exit 1
fi

# Check for help
if [[ ${help} == "true" ]]; then
  usage
  exit 1
fi

# Can only be run as root user
if [ "$(whoami)" != 'root' ]; then
  error "$(basename "$0"): must be root."
  exit 1
fi

# Verbose mode
if [[ ${VERBOSE} == "true" ]]; then
  set -o verbose
fi

# Debug mode
if [[ ${DEBUG} == "true" ]]; then
  set -o xtrace
  PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  LOG_LEVEL="7"
  trap '__err_report "${FUNCNAME:-.}" ${LINENO}' ERR
fi

update_system_pkgs() {
  if [ "$SYSTEM_UPDATE" == "true" ]; then
    apt update && apt upgrade -y
  else
    notice "System updates not set, skipping ${FUNCNAME[0]}"
  fi
}

blacklist_dvbt_modules() {
  if [ ! -f /etc/modprobe.d/blacklist-dvbt.conf ] || [ ${DESTRUCTIVE} ]; then
    mkdir -p /etc/modprobe.d || true
    touch /etc/modprobe.d/blacklist-dvbt.conf || true
    cat >/etc/modprobe.d/blacklist-dvbt.conf <<EOF
blacklist rtl8192cu
blacklist rtl8xxxu
blacklist dvb_usb_rtl28xxu
blacklist e4000
blacklist rtl2832
blacklist r820t
blacklist rtl2830
blacklist dvb_usb_rtl28xxu
blacklist dvb_usb_rtl2832u
EOF
  else
    notice "DVB-T Blacklist found, skipping ${FUNCNAME[0]}"
  fi
}

install_ogn_pkgs() {
  if [[ ! -L "/opt/rtlsdr-ogn" ]] || [ ${DESTRUCTIVE} ]; then
    apt-get install rtl-sdr -y
    apt-get install libconfig9 libjpeg8 libfftw3-dev lynx ntpdate ntp screen -y
    if [[ ${REAL_PI} == 0 ]]; then
      wget http://download.glidernet.org/rpi-gpu/rtlsdr-ogn-bin-RPI-GPU-latest.tgz -O /tmp/rtlsdr-ogn-bin.tgz
    else
      case ${CPU_ARCHITECTURE} in
        "armv6l" | "armv7l")
          wget http://download.glidernet.org/arm/rtlsdr-ogn-bin-ARM-latest.tgz -O /tmp/rtlsdr-ogn-bin.tgz
          ;;
        "x86_64")
          wget http://download.glidernet.org/x64/rtlsdr-ogn-bin-x64-latest.tgz -O /tmp/rtlsdr-ogn-bin.tgz
          ;;
        *)
          wget http://download.glidernet.org/x86/rtlsdr-ogn-bin-x86-latest.tgz -O /tmp/rtlsdr-ogn-bin.tgz
          ;;
      esac
    fi
    tar xvzf /tmp/rtlsdr-ogn-bin.tgz -C /opt
    rm /tmp/rtlsdr-ogn-bin.tgz
  else
    notice "/opt/rtlsdr-ogn link found, skipping ${FUNCNAME[0]}"
  fi
}

create_ogn_fifo() {
  if [[ ! -p "/opt/rtlsdr-ogn/ogn-rf.fifo" ]]; then
    sudo mkfifo /opt/rtlsdr-ogn/ogn-rf.fifo
  else
    notice "/opt/rtlsdr-ogn/ogn-rf.fifo found, skipping ${FUNCNAME[0]}"
  fi
}

create_gpu_dev() {
  if [[ ! -c "/dev/gpu_dev" ]]; then
    if [[ ${KERNEL_VERSION} -lt "41" ]]; then
      mknod /dev/gpu_dev c 100 0
    else
      mknod /dev/gpu_dev c 249 0
    fi
  else
    notice "/dev/gpu_dev found, skipping ${FUNCNAME[0]}"
  fi
}

create_ogn_template() {
  if [ ! -f /opt/rtlsdr-ogn/"${OGN_CALLSIGN}".conf ] || [ ${DESTRUCTIVE} ]; then
    cat >/opt/rtlsdr-ogn/"${OGN_CALLSIGN}".conf <<EOF
RF:
{
  FreqCorr = ${OGN_FREQCORR}; # [ppm] "big" R820T sticks have 40-80ppm correction factors, measure it with gsm_scan
  GSM: # for frequency calibration based on GSM signals
  {
    CenterFreq = ${OGN_GSMCENTERFREQ}; # [MHz] find the best GSM frequency with gsm_scan
    Gain       = ${OGN_GSMGAIN}; # [dB]  RF input gain (beware that GSM signals are very strong !)
  };
};

Position:
{
  Latitude   = ${OGN_LATITUDE}; # [deg] Antenna coordinates
  Longitude  = ${OGN_LONGITUDE}; # [deg]
  Altitude   = ${OGN_ALTITUDE}; # [m] Altitude above sea leavel
  GeoidSepar = ${OGN_GEOIDSEPAR}; # [m] Geoid separation: FLARM transmits GPS altitude, APRS uses means Sea level altitude
};

APRS:
{
  # Please refer to http://wiki.glidernet.org/receiver-naming-convention
  Call = "${OGN_CALLSIGN}"; # APRS callsign (max. 9 characters)
};
EOF
  else
    notice "OGN config found, skipping ${FUNCNAME[0]} for callsign ${OGN_CALLSIGN}"
  fi
}

create_ogn_rf_script() {
  if [ ! -f /opt/rtlsdr-ogn/"${OGN_CALLSIGN}"_rf ] || [ ${DESTRUCTIVE} ]; then
    cat >/opt/rtlsdr-ogn/"${OGN_CALLSIGN}"_rf <<EOF
#!/usr/bin/env bash

cd /opt/rtlsdr-ogn
/opt/rtlsdr-ogn/ogn-rf /opt/rtlsdr-ogn/${OGN_CALLSIGN}.conf
EOF
    chmod +x /opt/rtlsdr-ogn/"${OGN_CALLSIGN}"_rf
  else
    notice "OGN rf script found, skipping ${FUNCNAME[0]} for callsign ${OGN_CALLSIGN}"
  fi
}

create_ogn_decode_script() {
  if [ ! -f /opt/rtlsdr-ogn/"${OGN_CALLSIGN}"_decode ] || [ ${DESTRUCTIVE} ]; then
    cat >/opt/rtlsdr-ogn/"${OGN_CALLSIGN}"_decode <<EOF
#!/usr/bin/env bash

cd /opt/rtlsdr-ogn
/opt/rtlsdr-ogn/ogn-decode /opt/rtlsdr-ogn/${OGN_CALLSIGN}.conf
EOF
    chmod +x /opt/rtlsdr-ogn/"${OGN_CALLSIGN}"_decode
  else
    notice "OGN decode script found, skipping ${FUNCNAME[0]} for callsign ${OGN_CALLSIGN}"
  fi
}

create_ogn_rf_cron() {
  if [ ! -f /etc/cron.d/"${OGN_CALLSIGN}"_rf ] || [ ${DESTRUCTIVE} ]; then
    cat >/etc/cron.d/"${OGN_CALLSIGN}"_rf <<EOF
# RF cronjob for ${OGN_CALLSIGN}

${OGN_CRON} if [ \$(pgrep ogn-rf | tr '\n' ' ' | awk '{print \$1}') ]; then echo "\$(date -u +\"%Y-%m-%d %H:%M:%S UTC\") ogn-rf ${OGN_CALLSIGN} works"; else screen -dmS ognrf-${OGN_CALLSIGN} /opt/rtlsdr-ogn/${OGN_CALLSIGN}_rf; fi >> /var/log/ogn/rf.log 2>&1
EOF
    chmod +x /etc/cron.d/"${OGN_CALLSIGN}"_rf
    if [ ! -f /var/log/ogn/rf.log ]; then
      mkdir -p "$(dirname "/var/log/ogn/rf.log")" || true
      touch /var/log/ogn/rf.log || critical "Could not create rf log"
    fi
  else
    notice "OGN rf cron found, skipping ${FUNCNAME[0]} for callsign ${OGN_CALLSIGN}"
  fi
}

create_ogn_decode_cron() {
  if [ ! -f /etc/cron.d/"${OGN_CALLSIGN}"_decode ] || [ ${DESTRUCTIVE} ]; then
    cat >/etc/cron.d/"${OGN_CALLSIGN}"_decode <<EOF
# Decode cronjob for ${OGN_CALLSIGN}

${OGN_CRON} if [ \$(pgrep ogn-decode | tr '\n' ' ' | awk '{print \$1}') ]; then echo "\$(date -u +\"%Y-%m-%d %H:%M:%S UTC\") ogn-decode ${OGN_CALLSIGN} works"; else screen -dmS ogndecode-${OGN_CALLSIGN} /opt/rtlsdr-ogn/${OGN_CALLSIGN}_decode; fi >> /var/log/ogn/decode.log 2>&1
EOF
    chmod +x /etc/cron.d/"${OGN_CALLSIGN}"_decode
    if [ ! -f /var/log/ogn/decode.log ]; then
      mkdir -p "$(dirname "/var/log/ogn/decode.log")" || true
      touch /var/log/ogn/decode.log || critical "Could not create decode log"
    fi
  else
    notice "OGN decode cron found, skipping ${FUNCNAME[0]} for callsign ${OGN_CALLSIGN}"
  fi
}

install_dump1090_fa() {
  if ! command -v dump1090-fa || [ ${DESTRUCTIVE} ]; then
    if [[ ${REAL_PI} == 0 ]]; then
      wget http://flightaware.com/adsb/piaware/files/packages/pool/piaware/p/piaware-support/piaware-repository_3.8.1_all.deb -O /tmp/piaware-repository_3.8.1_all.deb
      dpkg -i /tmp/piaware-repository_3.8.1_all.deb
      apt update
      apt upgrade piaware-repository -y
      apt update
      apt install dump1090-fa -y
      rm /tmp/piaware-repository_3.8.1_all.deb
    else
      apt install libncurses5-dev git pkg-config lighttpd librtlsdr-dev debhelper libusb-1.0-0-dev dh-systemd -y
      rm -rf /tmp/dump1090 || true
      git clone https://github.com/flightaware/dump1090 /tmp/dump1090
      cd /tmp/dump1090
      sed -i 's/BLADERF=yes/BLADERF=no/' debian/rules
      sed -i 's/, libbladerf-dev//' debian/control
      sed -i 's/libbladerf1 (>= 0.2016.06), //' debian/control
      dpkg-buildpackage -b
      cd ../
      case ${CPU_ARCHITECTURE} in
        "armv6l" | "armv7l")
          dpkg -i dump1090-fa_3.8.1_armhf.deb
          ;;
        "arm64")
          dpkg -i dump1090-fa_3.8.1_arm64.deb
          ;;
        "x86_64")
          dpkg -i dump1090-fa_3.8.1_amd64.deb
          ;;
        *)
          dpkg -i dump1090-fa_3.8.1_x86.deb
          ;;
      esac
      popd >/dev/null 2>&1
      popd >/dev/null 2>&1
    fi
  else
    notice "dump1090-fa already installed, skipping ${FUNCNAME[0]}"
  fi
}

install_fr24_feed() {
  if ! command -v fr24feed || [ ${DESTRUCTIVE} ]; then
    case ${CPU_ARCHITECTURE} in
      "armv6l" | "armv7l" | "arm64")
        if ! grep -q flightradar24 /etc/apt/sources.list; then
          mv /etc/apt/sources.list /etc/apt/sources.list.bak
          grep -v flightradar24 /etc/apt/sources.list.bak >/etc/apt/sources.list || true
          apt-key adv --recv-key --keyserver pool.sks-keyservers.net C969F07840C430F5 || apt-key adv --recv-key --keyserver pgp.mit.edu C969F07840C430F5
          echo 'deb http://repo.feed.flightradar24.com flightradar24 raspberrypi-stable' >>/etc/apt/sources.list
        fi
        apt update -y
        apt install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y fr24feed
        ;;
      "x86_64")
        wget https://repo-feed.flightradar24.com/linux_x86_64_binaries/fr24feed_1.0.24-5_amd64.tgz -O /tmp/fr24feed.tgz
        tar xvzf /tmp/fr24feed.tgz -C /tmp
        cp /tmp/fr24feed_amd64/fr24feed /usr/bin/fr24feed
        rm -rf /tmp/fr24feed_amd64
        ;;
      *)
        wget https://repo-feed.flightradar24.com/linux_x86_64_binaries/fr24feed_1.0.24-5_i386.tgz -O /tmp/fr24feed.tgz
        tar xvzf /tmp/fr24feed.tgz -C /tmp
        cp /tmp/fr24feed_i386/fr24feed /usr/bin/fr24feed
        rm -rf /tmp/fr24feed_i386
        ;;
    esac
  else
    notice "FlightRadar24 feed already installed, skipping ${FUNCNAME[0]}"
  fi
}

setup_fr24_svc() {
  cat >/etc/systemd/system/fr24feed.service <<EOF
[Unit]
Description=Flightradar24 Decoder & Feeder
After=network-online.target

[Service]
Type=simple
Restart=always
LimitCORE=infinity
ExecStart=/usr/bin/fr24feed
PermissionsStartOnly=true
StandardOutput=null

[Install]
WantedBy=multi-user.target
EOF

  cat >/etc/fr24feed.ini <<EOF
bs="no"
fr24key="${FR24_KEY}"
host="127.0.0.1:30005"
logmode="0"
mlat-without-gps="yes"
mlat="yes"
mpx="no"
raw="no"
receiver="beast-tcp"
windowmode="0"
EOF

  systemctl daemon-reload
  systemctl start fr24feed
  systemctl enable fr24feed
}

main() {
  update_system_pkgs
  blacklist_dvbt_modules
  install_ogn_pkgs
  create_ogn_fifo
  create_gpu_dev
  create_ogn_template
  create_ogn_rf_script
  create_ogn_decode_script
  create_ogn_rf_cron
  create_ogn_decode_cron
  install_dump1090_fa
  install_fr24_feed
  setup_fr24_svc
}

if [[ $0 == "${BASH_SOURCE[*]}" ]]; then
  main "${@}"
  info "Done."
fi
