#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# OGN installer
#
# MIT License
#
# Copyright 2020 Mark Gomersbach <mark@gomersbach.nl>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

LOG_LEVEL="${LOG_LEVEL:-6}"
NO_COLOR="${NO_COLOR:-}"
DEBUG="${DEBUG:-}"
VERBOSE="${VERBOSE:-}"
help="false"

function __log() {
  local log_level="${1}"
  shift

  # shellcheck disable=SC2034
  local color_debug='\x1b[35m'
  # shellcheck disable=SC2034
  local color_info='\x1b[32m'
  # shellcheck disable=SC2034
  local color_notice='\x1b[34m'
  # shellcheck disable=SC2034
  local color_warning='\x1b[33m'
  # shellcheck disable=SC2034
  local color_error='\x1b[31m'
  # shellcheck disable=SC2034
  local color_critical='\x1b[1;31m'
  # shellcheck disable=SC2034
  local color_alert='\x1b[1;37;41m'
  # shellcheck disable=SC2034
  local color_emergency='\x1b[1;4;5;37;41m'

  local colorvar="color_${log_level}"

  local color="${!colorvar:-${color_error}}"
  local color_reset='\x1b[0m'

  if [[ ${NO_COLOR:-} == "true" ]]; then
    color=""
    color_reset=""
  fi

  local log_line=""

  while IFS=$'\n' read -r log_line; do
    echo -e "$(date -u +"%Y-%m-%d %H:%M:%S UTC") ${color}$(printf "[%9s]" "${log_level}")${color_reset} ${log_line}" 1>&2
  done <<<"${@:-}"
}

function emergency() {
  __log emergency "${@}"
  exit 1
}

function alert() {
  [[ ${LOG_LEVEL:-0} -ge 1 ]] && __log alert "${@}"
  true
}

function critical() {
  [[ ${LOG_LEVEL:-0} -ge 2 ]] && __log critical "${@}"
  true
}

function error() {
  [[ ${LOG_LEVEL:-0} -ge 3 ]] && __log error "${@}"
  true
}

function warning() {
  [[ ${LOG_LEVEL:-0} -ge 4 ]] && __log warning "${@}"
  true
}

function notice() {
  [[ ${LOG_LEVEL:-0} -ge 5 ]] && __log notice "${@}"
  true
}

function info() {
  [[ ${LOG_LEVEL:-0} -ge 6 ]] && __log info "${@}"
  true
}

function debug() {
  [[ ${LOG_LEVEL:-0} -ge 7 ]] && __log debug "${@}"
  true
}

__err_report() {
  local error_code=${?}
  error "Error in function ${1} on line ${2}"
  exit ${error_code}
}

# Help message
usage() {
  cat <<EOF
Usage:
    $0 [options]

Options:
    -d         Output debugging messages
    -h         This
    -n         No colored output
    -v         Enable verbose mode, print script as it is executed
EOF
}

# Flag handling
while getopts 'dhnv' flag; do
  case "${flag}" in
    d) DEBUG="true" ;;
    h) help="true" ;;
    n) NO_COLOR="true" ;;
    v) VERBOSE="true" ;;
    *) error "Unexpected option ${flag}" && usage ;;
  esac
done

# Check if any arguments are given
if [ $# -eq 0 ]; then
  error "No arguments provided"
  usage
  exit 1
fi

# Check for help
if [[ ${help} == "true" ]]; then
  usage
  exit 1
fi

# Can only be run as root user
if [ "$(whoami)" != 'root' ]; then
  error "$(basename "$0"): must be root."
  exit 1
fi

# Verbose mode
if [[ ${VERBOSE} == "true" ]]; then
  set -o verbose
fi

# Debug mode
if [[ ${DEBUG} == "true" ]]; then
  set -o xtrace
  PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  LOG_LEVEL="7"
  trap '__err_report "${FUNCNAME:-.}" ${LINENO}' ERR
fi

update_system_pkgs() {
  apt update && apt upgrade -y
}

blacklist_dvbt_modules() {
  if [ ! -L /opt/rtlsdr-ogn ]; then
    cat >/etc/modprobe.d/blacklist-dvbt.conf <<EOF
blacklist rtl8192cu
blacklist rtl8xxxu
blacklist dvb_usb_rtl28xxu
blacklist e4000
blacklist rtl2832
blacklist r820t
blacklist rtl2830
blacklist dvb_usb_rtl28xxu
blacklist dvb_usb_rtl2832u
EOF
  else
    notice "DVB-T Blacklist found, skipping ${FUNCNAME[0]}"
  fi
}

install_ogn_pkgs() {
  if [ ! -L /opt/rtlsdr-ogn ]; then
    apt-get install rtl-sdr -y
    apt-get install libconfig9 libjpeg8 libfftw3-dev lynx ntpdate ntp -y
    wget http://download.glidernet.org/rpi-gpu/rtlsdr-ogn-bin-RPI-GPU-latest.tgz -O /tmp/rtlsdr-ogn-bin-RPI-GPU-latest.tgz
    tar xvzf /tmp/rtlsdr-ogn-bin-RPI-GPU-latest.tgz -C /opt
  else
    notice "/opt/rtlsdr-ogn link found, skipping ${FUNCNAME[0]}"
  fi
}

create_ogn_fifo() {
  if [[ ! -p "ogn-rf.fifo" ]]; then
    echo -e "\e[94m  Creating named pipe...\e[97m"
    sudo mkfifo ogn-rf.fifo
  fi
}

main() {
  update_system_pkgs
  blacklist_dvbt_modules
  install_ogn_pkgs
  # create_ogn_fifo
  # create_gpu_dev
  # create_ogn_template
  # create_ogn_rf_script
  # create_ogn_decode_script
  # create_ogn_rf_cron
  # create_ogn_decode_cron
  # install_fr24_pkgs
  # install_fr24_svc
}

if [[ $0 == "${BASH_SOURCE[*]}" ]]; then
  main "${@}"
fi
